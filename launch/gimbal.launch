<launch>

  <arg name="UAV_NAME" default="$(optenv UAV_NAME uav)" />
  <arg name="portname" default="/dev/gimbal" />
  <!-- baudrate: 9600 19200 38400 57600 115200 230400 460800 500000 576000 921600-->
  <arg name="baudrate" default="115200" /> 

  <arg name="base_frame_id" default="$(arg UAV_NAME)/gimbal/base_link" /> 
  <arg name="child_frame_id" default="$(arg UAV_NAME)/gimbal/child_link" /> 
  <arg name="optical_frame_id" default="$(arg UAV_NAME)/gimbal/camera_optical" /> 

  <!-- will it run using GNU debugger? -->
  <arg name="DEBUG" default="false" />
  <arg unless="$(arg DEBUG)" name="launch_prefix_debug" value=""/>
  <arg     if="$(arg DEBUG)" name="launch_prefix_debug" value="debug_roslaunch"/>

  <!-- will it run as standalone nodelet or using a nodelet manager? -->
  <arg name="standalone" default="true" />
  <arg name="manager" default="$(arg UAV_NAME)_bacaprotocol_manager" />
  <arg name="n_threads" default="2" />
  <arg unless="$(arg standalone)" name="nodelet" value="load"/>
  <arg     if="$(arg standalone)" name="nodelet" value="standalone"/>
  <arg unless="$(arg standalone)" name="nodelet_manager" value="$(arg manager)"/>
  <arg     if="$(arg standalone)" name="nodelet_manager" value=""/>

  <group ns="$(arg UAV_NAME)">

    <!-- launch the nodelet -->
    <node pkg="nodelet" type="nodelet" name="gimbal_driver" args="$(arg nodelet) gimbal/Gimbal $(arg nodelet_manager)" launch-prefix="$(arg launch_prefix_debug)" output="screen">

      <param name="uav_name" type="string" value="$(arg UAV_NAME)"/>
      <param name="base_frame_id" type="string" value="$(arg base_frame_id)"/>
      <param name="child_frame_id" type="string" value="$(arg child_frame_id)"/>

      <rosparam file="$(find mrs_serial)/config/gimbal.yaml" />

      <!-- <param name="bind/host" value="0.0.0.0"/> -->
      <param name="bind/host" value="192.168.0.5"/>
      <param name="bind/port" value="10024"/>
      <param name="remote/host" value="192.168.0.203"/>
      <param name="remote/port" value="10024"/>

      <param name="use_timeout" value="false"/>

    </node>

    <node pkg="tf2_ros" type="static_transform_publisher" name="gimbal_static_tf_publisher" args="0 0 0 -1.5708 0.0 -1.5708 $(arg child_frame_id) $(arg optical_frame_id)" output="screen" />

  </group>

</launch>

